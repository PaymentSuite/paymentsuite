<?php
/*
 * This file is part of the Mascoteros package.
 *
 * Copyright (c) 2016-2017 Mascoteros.com
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Feel free to edit as you please, and have fun.
 *
 * @author Kevin Murillo <kevin92dev@gmail.com>
 */

namespace Atresmediahf\MarketplaceBundle\Tests\Services;

use Atresmediahf\MarketplaceBundle\Repository\BestMarketProductRepository;
use Atresmediahf\MascoterosBundle\Services\CompleteCartService;
use Nelmio\Alice\Fixtures\Loader;
use PaymentSuite\AdyenBundle\Interfaces\PaymentBridgeAdyenInterface;
use PaymentSuite\AdyenBundle\Services\AdyenClientService;
use PaymentSuite\AdyenBundle\Services\AdyenManagerService;
use PaymentSuite\PaymentCoreBundle\Services\PaymentEventDispatcher;
use Doctrine\Common\Persistence\ObjectManager;
use Doctrine\Common\Persistence\ObjectRepository;
use Symfony\Bridge\Monolog\Logger;
use Adyen\Contract;
use Adyen\Service\Recurring;

/**
 * Class CompleteCartServiceTest
 * @package Atresmediahf\MarketplaceBundle\Tests\Services
 */
class AdyenManagerServiceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AdyenManagerService
     */
    private $adyenManagerService;

    /**
     * @var PaymentEventDispatcher
     */
    private $eventDispatcher;

    /**
     * @var PaymentBridgeAdyenInterface
     */
    private $paymentBridge;

    /**
     * @var ObjectManager
     */
    private $transactionObjectManager;

    /**
     * @var ObjectRepository
     */
    private $transactionRepository;

    /**
     * @var AdyenClientService
     */
    private $adyenClientService;

    /**
     * @var Recurring
     */
    private $recurring;

    /**
     * @var Logger
     */
    private $logger;

    /**
     * @var string
     */
    private $shopperReference;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // Prophetize construct objects
        $prophet =  new \Prophecy\Prophet;

        $this->eventDispatcher = $prophet->prophesize(PaymentEventDispatcher::class);
        $this->paymentBridge = $prophet->prophesize(PaymentBridgeAdyenInterface::class);
        $this->transactionObjectManager = $prophet->prophesize(ObjectManager::class);
        $this->transactionRepository = $prophet->prophesize(ObjectRepository::class);
        $this->adyenClientService = $prophet->prophesize(AdyenClientService::class);
        $this->recurring = $prophet->prophesize(Recurring::class);
        $this->logger = $prophet->prophesize(Logger::class);
        $this->shopperReference = 14194858;
    }

    /**
     * @group api_integration
     * @group payment
     */
    public function testGetListRecurringDetails()
    {
        // Set Recurring class behavior
        $this->recurring
            ->listRecurringDetails($this->getPaymentData())
            ->willReturn($this->getFixtures());

        // Set AdyenClientService class behavior
        $this->adyenClientService
            ->getRecurringService()
            ->willReturn($this->recurring->reveal());

        // Instantiate class
        $this->adyenManagerService = new AdyenManagerService(
            $this->eventDispatcher->reveal(),
            $this->paymentBridge->reveal(),
            $this->transactionObjectManager->reveal(),
            $this->transactionRepository->reveal(),
            $this->adyenClientService->reveal(),
            $this->logger->reveal(),
            'Mascoteros',
            'EUR'
        );

        $recurringDetails = $this->adyenManagerService->getListRecurringDetails($this->shopperReference);
        $this->assertEquals($recurringDetails, $this->getFixtures());
    }

    /**
     * Return the array that will be returned by doRecurring method
     *
     * @return array
     */
    private function getFixtures()
    {
        $now = new \DateTime();

        // Method returned by doRecurring method
        $listRecurringDetails = [
            'creationDate' => $now->format('Y-m-d H:i:s'),
            'details' => [
                'RecurringDetail' => [
                    'additionalData' => [
                        'cardBin' => '492179'
                    ],
                    'card' => [
                        'expiryMonth' => '2',
                        'expiryYear' => '2017',
                        'holderName' => 'John Doe',
                        'number' => '0380'
                    ],
                    'alias' => 'H123456789012345',
                    'aliasType' => 'Default',
                    'creationDate' => $now->format('Y-m-d H:i:s'),
                    'firstPspReference' => '1314362892522014',
                    'recurringDetailReference' => '8313147988756818',
                    'paymentMethodVariant' => 'visadebit',
                    'variant' => 'visa'
                ]
            ],
            'lastKnownShopperEmail' => $this->shopperReference.'@gmail.com',
            'shopperReference' => $this->shopperReference
        ];

        return $listRecurringDetails;
    }

    /**
     * @return array
     */
    private function getPaymentData()
    {
        // Set data for call doRecurring method
        $paymentData = [];
        $paymentData['merchantAccount'] = 'Mascoteros';
        $paymentData['shopperReference'] = $this->shopperReference;
        $paymentData['recurring'] = [
            'contract' => Contract::ONECLICK
        ];

        return $paymentData;
    }
}
